// Generated by data binding compiler. Do not edit!
package com.offsec.nethunter.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.google.android.material.textfield.TextInputEditText;
import com.offsec.nethunter.MITMFViewModel;
import com.offsec.nethunter.R;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class MitmfInjectBinding extends ViewDataBinding {
  @NonNull
  public final CheckBox mitmfEnableinject;

  @NonNull
  public final TextInputEditText mitmfInjectIpText;

  @NonNull
  public final TextInputEditText mitmfInjectNoipText;

  @NonNull
  public final CheckBox mitmfInjectOnceperdomain;

  @NonNull
  public final CheckBox mitmfInjectPreservecache;

  @NonNull
  public final TextInputEditText mitmfInjectRateseconds;

  @NonNull
  public final TextInputEditText mitmfInjectTimesText;

  @NonNull
  public final TextInputEditText mitmfInjecthtmlUrl;

  @NonNull
  public final TextInputEditText mitmfInjecthtmlpayText;

  @NonNull
  public final TextInputEditText mitmfInjectjsUrl;

  @NonNull
  public final TextView textView;

  @Bindable
  protected MITMFViewModel mViewModel;

  protected MitmfInjectBinding(Object _bindingComponent, View _root, int _localFieldCount,
      CheckBox mitmfEnableinject, TextInputEditText mitmfInjectIpText,
      TextInputEditText mitmfInjectNoipText, CheckBox mitmfInjectOnceperdomain,
      CheckBox mitmfInjectPreservecache, TextInputEditText mitmfInjectRateseconds,
      TextInputEditText mitmfInjectTimesText, TextInputEditText mitmfInjecthtmlUrl,
      TextInputEditText mitmfInjecthtmlpayText, TextInputEditText mitmfInjectjsUrl,
      TextView textView) {
    super(_bindingComponent, _root, _localFieldCount);
    this.mitmfEnableinject = mitmfEnableinject;
    this.mitmfInjectIpText = mitmfInjectIpText;
    this.mitmfInjectNoipText = mitmfInjectNoipText;
    this.mitmfInjectOnceperdomain = mitmfInjectOnceperdomain;
    this.mitmfInjectPreservecache = mitmfInjectPreservecache;
    this.mitmfInjectRateseconds = mitmfInjectRateseconds;
    this.mitmfInjectTimesText = mitmfInjectTimesText;
    this.mitmfInjecthtmlUrl = mitmfInjecthtmlUrl;
    this.mitmfInjecthtmlpayText = mitmfInjecthtmlpayText;
    this.mitmfInjectjsUrl = mitmfInjectjsUrl;
    this.textView = textView;
  }

  public abstract void setViewModel(@Nullable MITMFViewModel viewModel);

  @Nullable
  public MITMFViewModel getViewModel() {
    return mViewModel;
  }

  @NonNull
  public static MitmfInjectBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.mitmf_inject, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static MitmfInjectBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<MitmfInjectBinding>inflateInternal(inflater, R.layout.mitmf_inject, root, attachToRoot, component);
  }

  @NonNull
  public static MitmfInjectBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.mitmf_inject, null, false, component)
   */
  @NonNull
  @Deprecated
  public static MitmfInjectBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<MitmfInjectBinding>inflateInternal(inflater, R.layout.mitmf_inject, null, false, component);
  }

  public static MitmfInjectBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static MitmfInjectBinding bind(@NonNull View view, @Nullable Object component) {
    return (MitmfInjectBinding)bind(component, view, R.layout.mitmf_inject);
  }
}
